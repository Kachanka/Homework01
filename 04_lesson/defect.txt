1) Заголовок: вывод не правильного ответа в командной строке при вводе команды на проверку Правда если строка начинается с заданного символа и Не правда, если начинается с другого символа .
Шаги: зайти в VS Code, перейти в ветку "lesson4", перейти в папку "04_lesson", зайти в файл "string_utils.py" и берем команду:
 (def starts_with(self, string: str, symbol: str) -> bool:
        """
        Возвращает `True`, если строка начинается с заданного символа и
        `False` - если нет \n
        Параметры: \n
            `string` - строка для обработки \n
            `symbol` - искомый символ \n
        Пример 1: `starts_with("SkyPro", "S") -> True`
        Пример 2: `starts_with("SkyPro", "P") -> False`
        """), вводим тест (sw = string_utils.starts_with("1Ariel", "А")
assert sw is False).
ОР: Сообщение об ошибке.
ФР:Сообщения об ошибки нет.
Серьезность: Critical
Приоритет: Hight

2) Заголовок:вывод не правильного ответа в командной строке при вводе команды на проверку: правда, если строка заканчивается на заданный символ и не правда, если не заканчивается.
Шаги: зайти в VS Code, перейти в ветку "lesson4", перейти в папку "04_lesson", зайти в файл "string_utils.py" и берем команду:
def end_with(self, string: str, symbol: str) -> bool:
        """
        Возвращает `True`, если строка заканчивается заданным символом и
        `False` - если нет \n
        Параметры: \n
            `string` - строка для обработки \n
            `symbol` - искомый символ \n
        Пример 1: `end_with("SkyPro", "o") -> True`
        Пример 2: `end_with("SkyPro", "y") -> False`
        """
        return string.endswith(symbol), вводим тест : ew = string_utils.end_with("Ariel1", "l")
assert sw is False
ОР: Сообщение об ошибке
ФР: Сообщение об обшике нет
Серьезность: Critical
Приоритет: Hight
3)Заголовок: ошибка при правильном вводе проверки в командной строке при преобразовании списка
Шаги:зайти в VS Code, перейти в ветку "lesson4", перейти в папку "04_lesson", зайти в файл "string_utils.py" и берем команду
  def list_to_string(self, lst: list, joiner=", ") -> str:
        """
        Преобразует список элементов в строку с указанным разделителем \n
        Параметры: \n
            `lst` - список элементов \n
            `joiner` - разделитель элементов в строке.
            По умолчанию запятая (", ") \n
        Пример 1: `list_to_string([1,2,3,4]) -> "1, 2, 3, 4"`
        Пример 2: `list_to_string(["Sky", "Pro"]) -> "Sky, Pro"`
        Пример 3: `list_to_string(["Sky", "Pro"], "-") -> "Sky-Pro"`
        """, вводим тест lts = string_utils.list_to_string([-, +, /])
assert lts == "-, +, /"
ОР: Сообщдения об ошибки нет
ФР: сообщение об ошибке
Серьезность : Critical
Приоритет: High